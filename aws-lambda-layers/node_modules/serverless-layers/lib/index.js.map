{"version":3,"sources":["../src/index.js"],"names":["BbPromise","require","path","chalk","Runtimes","LayersService","BucketService","CloudFormationService","ZipService","Dependencies","ServerlessLayers","serverless","options","cacheObject","initialized","hooks","bind","then","init","main","finalizeDeploy","cleanUpLayers","provider","getProvider","service","region","getRegion","log","version","getVersion","replace","process","exit","runtimes","settings","getSettings","zipService","dependencies","layersService","bucketService","cloudFormationService","inboundSettings","custom","compileDir","customInstallationCommand","layersDeploymentBucket","deploymentBucket","getDefaultSettings","hasDependencesChanged","isDifferent","mergePackageOptions","getLayerArn","currentLayerARN","relateLayerWithFunctions","install","uploadZipFile","publishVersion","uploadDependencesFile","LayerVersionArn","naming","getStackName","Error","join","cwd","serviceStage","stage","deploymentPrefix","getDeploymentPrefix","getOutputs","outputs","logicalId","getOutputLogicalId","find","x","OutputKey","OutputValue","getLambdaLayerOutputLogicalId","packageExclude","pkg","opts","individually","excludeDevDependencies","exclude","excludeFile","hasRule","indexOf","push","layerArn","functions","Object","keys","forEach","funcName","layers","resources","Outputs","outputName","assign","Value","Export","Name","localPackage","map","msg","cli","yellowBright","red","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,UAAD,CAAzB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAMI,aAAa,GAAGJ,OAAO,CAAC,qBAAD,CAA7B;;AACA,IAAMK,aAAa,GAAGL,OAAO,CAAC,qBAAD,CAA7B;;AACA,IAAMM,qBAAqB,GAAGN,OAAO,CAAC,6BAAD,CAArC;;AACA,IAAMO,UAAU,GAAGP,OAAO,CAAC,sBAAD,CAA1B;;AACA,IAAMQ,YAAY,GAAGR,OAAO,CAAC,wBAAD,CAA5B;;IAEMS,gB;;;AACJ,4BAAYC,UAAZ,EAAwBC,OAAxB,EAAiC;AAAA;;AAAA;AAC/B,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKG,WAAL,GAAmB,KAAnB,CAJ+B,CAM/B;;AACA,SAAKC,KAAL,GAAa;AACX,yCAAmC;AAAA,eAAMf,SAAS,CAACgB,IAAV,CAAe,KAAf,EACtCC,IADsC,CACjC;AAAA,iBAAM,KAAI,CAACC,IAAL,GAAYD,IAAZ,CAAiB;AAAA,mBAAK,KAAI,CAACE,IAAL,EAAL;AAAA,WAAjB,CAAN;AAAA,SADiC,CAAN;AAAA,OADxB;AAGX,mCAA6B;AAAA,eAAMnB,SAAS,CAACgB,IAAV,CAAe,KAAf,EAChCC,IADgC,CAC3B;AAAA,iBAAM,KAAI,CAACC,IAAL,GAAYD,IAAZ,CAAiB;AAAA,mBAAK,KAAI,CAACE,IAAL,EAAL;AAAA,WAAjB,CAAN;AAAA,SAD2B,CAAN;AAAA,OAHlB;AAKX,gCAA0B;AAAA,eAAMnB,SAAS,CAACgB,IAAV,CAAe,KAAf,EAC7BC,IAD6B,CACxB;AAAA,iBAAM,KAAI,CAACC,IAAL,EAAN;AAAA,SADwB,EAE7BD,IAF6B,CAExB;AAAA,iBAAM,KAAI,CAACG,cAAL,EAAN;AAAA,SAFwB,CAAN;AAAA,OALf;AAQX,oCAA8B;AAAA,eAAMpB,SAAS,CAACgB,IAAV,CAAe,KAAf,EACjCC,IADiC,CAC5B;AAAA,iBAAM,KAAI,CAACC,IAAL,EAAN;AAAA,SAD4B,EAEjCD,IAFiC,CAE5B;AAAA,iBAAM,KAAI,CAACI,aAAL,EAAN;AAAA,SAF4B,CAAN;AAAA,OARnB;AAWX,uBAAiB;AAAA,eAAMrB,SAAS,CAACgB,IAAV,CAAe,KAAf,EACpBC,IADoB,CACf;AAAA,iBAAM,KAAI,CAACC,IAAL,EAAN;AAAA,SADe,EAEpBD,IAFoB,CAEf;AAAA,iBAAM,KAAI,CAACI,aAAL,EAAN;AAAA,SAFe,CAAN;AAAA;AAXN,KAAb;AAeD;;;;;;;;;;;;;qBAGK,KAAKP,W;;;;;;;;AAIT,qBAAKQ,QAAL,GAAgB,KAAKX,UAAL,CAAgBY,WAAhB,CAA4B,KAA5B,CAAhB;AACA,qBAAKC,OAAL,GAAe,KAAKb,UAAL,CAAgBa,OAA/B;AACA,qBAAKZ,OAAL,CAAaa,MAAb,GAAsB,KAAKH,QAAL,CAAcI,SAAd,EAAtB,C,CAEA;;AACA,qBAAKC,GAAL,GAAW,KAAKA,GAAL,CAASX,IAAT,CAAc,IAAd,CAAX;AACA,qBAAKG,IAAL,GAAY,KAAKA,IAAL,CAAUH,IAAV,CAAe,IAAf,CAAZ;AAEMY,gBAAAA,O,GAAU,KAAKjB,UAAL,CAAgBkB,UAAhB,GAA6BC,OAA7B,CAAqC,KAArC,EAA4C,EAA5C,C;;AAEhB,oBAAIF,OAAO,GAAG,IAAd,EAAoB;AAClB,uBAAKD,GAAL,+DAAgE,KAAKhB,UAAL,CAAgBkB,UAAhB,EAAhE;AACAE,kBAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAED,qBAAKC,QAAL,GAAgB,IAAI7B,QAAJ,CAAa,IAAb,CAAhB;AAEA,qBAAK8B,QAAL,GAAgB,KAAKC,WAAL,EAAhB;AAEA,qBAAKC,UAAL,GAAkB,IAAI5B,UAAJ,CAAe,IAAf,CAAlB;AACA,qBAAK6B,YAAL,GAAoB,IAAI5B,YAAJ,CAAiB,IAAjB,CAApB;AACA,qBAAK6B,aAAL,GAAqB,IAAIjC,aAAJ,CAAkB,IAAlB,CAArB;AACA,qBAAKkC,aAAL,GAAqB,IAAIjC,aAAJ,CAAkB,IAAlB,CAArB;AACA,qBAAKkC,qBAAL,GAA6B,IAAIjC,qBAAJ,CAA0B,IAA1B,CAA7B;AAEA,qBAAKO,WAAL,GAAmB,IAAnB;;;;;;;;;;;;;;;;;;kCAGY;AACZ,UAAM2B,eAAe,GAAG,CAAC,KAAK9B,UAAL,CAAgBa,OAAhB,CAAwBkB,MAAxB,IAAkC,EAAnC,EACtB,mBADsB,CAAxB;AAGA;AACEC,QAAAA,UAAU,EAAE,aADd;AAEEC,QAAAA,yBAAyB,EAAE,IAF7B;AAGEC,QAAAA,sBAAsB,EAAE,KAAKrB,OAAL,CAAaF,QAAb,CAAsBwB;AAHhD,SAIK,KAAKb,QAAL,CAAcc,kBAAd,CAAiCN,eAAjC,CAJL;AAMD;;;;;;;;;;;;;uBAGO,KAAKJ,YAAL,CAAkBnB,IAAlB,E;;;;uBAEoB,KAAKe,QAAL,CAAce,qBAAd,E;;;AAApBC,gBAAAA,W;AAEN;AACA,qBAAKC,mBAAL;;uBAE8B,KAAKC,WAAL,E;;;AAAxBC,gBAAAA,e;;sBACF,CAACH,WAAD,IAAgBG,e;;;;;AACnB,qBAAKzB,GAAL,kDAAmDyB,eAAnD;AACA,qBAAKC,wBAAL,CAA8BD,eAA9B;;;;;uBAIK,KAAKf,YAAL,CAAkBiB,OAAlB,E;;;;uBACA,KAAKlB,UAAL,a;;;;uBACA,KAAKG,aAAL,CAAmBgB,aAAnB,E;;;;uBACgB,KAAKjB,aAAL,CAAmBkB,cAAnB,E;;;AAAhB5B,gBAAAA,O;;uBACA,KAAKW,aAAL,CAAmBkB,qBAAnB,E;;;AAEN,qBAAKJ,wBAAL,CAA8BzB,OAAO,CAAC8B,eAAtC;;;;;;;;;;;;;;;;;;mCAGa;AACb,aAAO,KAAKpC,QAAL,CAAcqC,MAAd,CAAqBC,YAArB,EAAP;AACD;;;oCAEe;AACd,UAAI,CAAC,KAAK1B,QAAL,CAAcW,sBAAnB,EAA2C;AACzC,cAAM,IAAIgB,KAAJ,CACJ,qGADI,CAAN;AAGD;;AACD,aAAO,KAAK3B,QAAL,CAAcW,sBAArB;AACD;;;yCAEoB;AACnB,uBAAU3C,IAAI,CAAC4D,IAAL,CAAU/B,OAAO,CAACgC,GAAR,EAAV,EAAyB,KAAK7B,QAAL,CAAcS,UAAvC,EAAmD,KAAKiB,YAAL,EAAnD,CAAV;AACD;;;0CAEqB;AACpB,UAAMI,YAAY,aAAM,KAAKrD,UAAL,CAAgBa,OAAhB,CAAwBA,OAA9B,cAAyC,KAAKZ,OAAL,CAAaqD,KAAtD,CAAlB;AAEA,UAAIC,gBAAgB,GAAG,YAAvB;;AACA,UAAI,KAAK5C,QAAL,CAAc6C,mBAAlB,EAAuC;AACrCD,QAAAA,gBAAgB,GAAG,KAAK5C,QAAL,CAAc6C,mBAAd,EAAnB;AACD;;AAED,aAAOjE,IAAI,CAAC4D,IAAL,CACLI,gBADK,EAELF,YAFK,EAGL,QAHK,EAILlC,OAJK,CAIG,KAJH,EAIU,GAJV,CAAP;AAKD;;;;;;;;;;;;qBAGK,KAAKjB,WAAL,CAAiB6C,e;;;;;kDACZ,KAAK7C,WAAL,CAAiB6C,e;;;;uBAEJ,KAAKlB,qBAAL,CAA2B4B,UAA3B,E;;;AAAhBC,gBAAAA,O;;oBACDA,O;;;;;kDAAgB,I;;;AACfC,gBAAAA,S,GAAY,KAAKC,kBAAL,E;kDACX,CAACF,OAAO,CAACG,IAAR,CAAa,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAACC,SAAF,KAAgBJ,SAApB;AAAA,iBAAd,KAAgD,EAAjD,EAAqDK,W;;;;;;;;;;;;;;;;;;yCAGzC;AACnB,aAAO,KAAKrD,QAAL,CAAcqC,MAAd,CAAqBiB,6BAArB,CAAmD,KAAKhB,YAAL,EAAnD,CAAP;AACD;;;0CAEqB;AAAA,UACZiB,cADY,GACO,KAAK3C,QADZ,CACZ2C,cADY;AAEpB,UAAMC,GAAG,GAAG,KAAKtD,OAAL,WAAZ;AAEA,UAAMuD,IAAI,GAAG;AACXC,QAAAA,YAAY,EAAE,KADH;AAEXC,QAAAA,sBAAsB,EAAE,KAFb;AAGXC,QAAAA,OAAO,EAAE;AAHE,OAAb;AAMA,WAAK1D,OAAL,gCAA2BuD,IAA3B,MAAoCD,GAApC;AAVoB;AAAA;AAAA;;AAAA;AAYpB,6BAA0BD,cAA1B,8HAA0C;AAAA,cAA/BM,WAA+B;AACxC,cAAMC,OAAO,GAAG,CAAC,KAAK5D,OAAL,YAAqB0D,OAArB,IAAgC,EAAjC,EAAqCG,OAArC,CAA6CF,WAA7C,CAAhB;;AACA,cAAIC,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAClB,iBAAK5D,OAAL,YAAqB0D,OAArB,CAA6BI,IAA7B,CAAkCH,WAAlC;AACD;AACF;AAjBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBrB;;;6CAEwBI,Q,EAAU;AAAA;;AACjC,WAAK5D,GAAL,CAAS,uBAAT;AADiC,UAGzB6D,SAHyB,GAGX,KAAKhE,OAHM,CAGzBgE,SAHyB;AAKjCC,MAAAA,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAuBG,OAAvB,CAA+B,UAAAC,QAAQ,EAAI;AACzCJ,QAAAA,SAAS,CAACI,QAAD,CAAT,CAAoBC,MAApB,GAA6BL,SAAS,CAACI,QAAD,CAAT,CAAoBC,MAApB,IAA8B,EAA3D;AACAL,QAAAA,SAAS,CAACI,QAAD,CAAT,CAAoBC,MAApB,CAA2BP,IAA3B,CAAgCC,QAAhC;;AACA,QAAA,MAAI,CAAC5D,GAAL,oBAAqBiE,QAArB,gBAAmCL,QAAnC;AACD,OAJD;AAMA,WAAK/D,OAAL,CAAasE,SAAb,GAAyB,KAAKtE,OAAL,CAAasE,SAAb,IAA0B,EAAnD;AACA,WAAKtE,OAAL,CAAasE,SAAb,CAAuBC,OAAvB,GAAiC,KAAKvE,OAAL,CAAasE,SAAb,CAAuBC,OAAvB,IAAkC,EAAnE;AAEA,UAAMC,UAAU,GAAG,KAAKzB,kBAAL,EAAnB;AAEAkB,MAAAA,MAAM,CAACQ,MAAP,CAAc,KAAKzE,OAAL,CAAasE,SAAb,CAAuBC,OAArC,uCACGC,UADH,EACgB;AACZE,QAAAA,KAAK,EAAEX,QADK;AAEZY,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAEJ;AADA;AAFI,OADhB;AAQD;;;0CAEqB;AAAA;;AACpB,aAAOP,MAAM,CAACC,IAAP,CAAa,KAAKW,YAAL,CAAkBhE,YAAlB,IAAgC,EAA7C,EAAkDiE,GAAlD,CAAsD,UAAA7B,CAAC;AAAA,yBACzDA,CADyD,cACpD,MAAI,CAAC4B,YAAL,CAAkBhE,YAAlB,CAA+BoC,CAA/B,CADoD;AAAA,OAAvD,CAAP;AAGD;;;;;;;;;;;;;;;uBAG+B,KAAKtB,WAAL,E;;;AAAxBC,gBAAAA,e;AACNqC,gBAAAA,MAAM,CAACC,IAAP,CAAY,KAAKlE,OAAL,CAAagE,SAAzB,EAAoCG,OAApC,CAA4C,UAAAC,QAAQ,EAAI;AACtD,kBAAA,MAAI,CAACjE,GAAL,oBAAqBiE,QAArB,uBAA0CxC,eAA1C;AACD,iBAFD;;;;;;;;;;;;;;;;;;wBAKEmD,G,EAAK;AACP,WAAK5F,UAAL,CAAgB6F,GAAhB,CAAoB7E,GAApB,2BAA2C4E,GAA3C;AACD;;;yBAEIA,G,EAAK;AACR,WAAK5F,UAAL,CAAgB6F,GAAhB,CAAoB7E,GAApB,CAAwBxB,KAAK,CAACsG,YAAN,2BAAsCF,GAAtC,EAAxB;AACD;;;0BAEKA,G,EAAK;AACT,WAAK5F,UAAL,CAAgB6F,GAAhB,CAAoB7E,GAApB,CAAwBxB,KAAK,CAACuG,GAAN,2BAA6BH,GAA7B,EAAxB;AACD;;;oCAEe;AACd,aAAO,KAAKjE,aAAL,CAAmBjB,aAAnB,EAAP;AACD;;;;;AAGHsF,MAAM,CAACC,OAAP,GAAiBlG,gBAAjB","sourcesContent":["const BbPromise = require('bluebird');\nconst path = require('path');\n\nconst chalk = require('chalk');\nconst Runtimes = require('./runtimes');\nconst LayersService = require('./aws/LayersService');\nconst BucketService = require('./aws/BucketService');\nconst CloudFormationService = require('./aws/CloudFormationService');\nconst ZipService = require('./package/ZipService');\nconst Dependencies = require('./package/Dependencies');\n\nclass ServerlessLayers {\n  constructor(serverless, options) {\n    this.cacheObject = {};\n    this.options = options;\n    this.serverless = serverless;\n    this.initialized = false;\n\n    // hooks\n    this.hooks = {\n      'before:package:function:package': () => BbPromise.bind(this)\n        .then(() => this.init().then(() =>this.main())),\n      'before:package:initialize': () => BbPromise.bind(this)\n        .then(() => this.init().then(() =>this.main())),\n      'aws:info:displayLayers': () => BbPromise.bind(this)\n        .then(() => this.init())\n        .then(() => this.finalizeDeploy()),\n      'plugin:uninstall:uninstall': () => BbPromise.bind(this)\n        .then(() => this.init())\n        .then(() => this.cleanUpLayers()),\n      'remove:remove': () => BbPromise.bind(this)\n        .then(() => this.init())\n        .then(() => this.cleanUpLayers()),\n    };\n  }\n\n  async init() {\n    if (this.initialized) {\n      return;\n    }\n\n    this.provider = this.serverless.getProvider('aws');\n    this.service = this.serverless.service;\n    this.options.region = this.provider.getRegion();\n\n    // bindings\n    this.log = this.log.bind(this);\n    this.main = this.main.bind(this);\n\n    const version = this.serverless.getVersion().replace(/\\./g, '');\n\n    if (version < 1340) {\n      this.log(`Error: Please install serverless >= 1.34.0 (current ${this.serverless.getVersion()})`)\n      process.exit(1);\n    }\n\n    this.runtimes = new Runtimes(this);\n\n    this.settings = this.getSettings();\n\n    this.zipService = new ZipService(this);\n    this.dependencies = new Dependencies(this);\n    this.layersService = new LayersService(this);\n    this.bucketService = new BucketService(this);\n    this.cloudFormationService = new CloudFormationService(this);\n\n    this.initialized = true;\n  }\n\n  getSettings() {\n    const inboundSettings = (this.serverless.service.custom || {})[\n      'serverless-layers'\n    ];\n    return {\n      compileDir: '.serverless',\n      customInstallationCommand: null,\n      layersDeploymentBucket: this.service.provider.deploymentBucket,\n      ...this.runtimes.getDefaultSettings(inboundSettings)\n    };\n  }\n\n  async main() {\n    await this.dependencies.init();\n\n    const isDifferent = await this.runtimes.hasDependencesChanged();\n\n    // merge package default options\n    this.mergePackageOptions();\n\n    const currentLayerARN = await this.getLayerArn();\n    if (!isDifferent && currentLayerARN) {\n     this.log(`Not has changed! Using same layer arn: ${currentLayerARN}`);\n     this.relateLayerWithFunctions(currentLayerARN);\n     return;\n    }\n\n    await this.dependencies.install();\n    await this.zipService.package();\n    await this.bucketService.uploadZipFile();\n    const version = await this.layersService.publishVersion();\n    await this.bucketService.uploadDependencesFile();\n\n    this.relateLayerWithFunctions(version.LayerVersionArn);\n  }\n\n  getStackName() {\n    return this.provider.naming.getStackName();\n  }\n\n  getBucketName() {\n    if (!this.settings.layersDeploymentBucket) {\n      throw new Error(\n        'Please, you should specify \"deploymentBucket\" or \"layersDeploymentBucket\" option for this plugin!\\n'\n      );\n    }\n    return this.settings.layersDeploymentBucket;\n  }\n\n  getPathZipFileName() {\n    return `${path.join(process.cwd(), this.settings.compileDir, this.getStackName())}.zip`;\n  }\n\n  getBucketLayersPath() {\n    const serviceStage = `${this.serverless.service.service}/${this.options.stage}`;\n\n    let deploymentPrefix = 'serverless';\n    if (this.provider.getDeploymentPrefix) {\n      deploymentPrefix = this.provider.getDeploymentPrefix();\n    }\n\n    return path.join(\n      deploymentPrefix,\n      serviceStage,\n      'layers'\n    ).replace(/\\\\/g, '/');\n  }\n\n  async getLayerArn() {\n    if (this.cacheObject.LayerVersionArn) {\n      return this.cacheObject.LayerVersionArn;\n    }\n    const outputs = await this.cloudFormationService.getOutputs();\n    if (!outputs) return null;\n    const logicalId = this.getOutputLogicalId();\n    return (outputs.find(x => x.OutputKey === logicalId) || {}).OutputValue;\n  }\n\n  getOutputLogicalId() {\n    return this.provider.naming.getLambdaLayerOutputLogicalId(this.getStackName());\n  }\n\n  mergePackageOptions() {\n    const { packageExclude } = this.settings;\n    const pkg = this.service.package;\n\n    const opts = {\n      individually: false,\n      excludeDevDependencies: false,\n      exclude: []\n    };\n\n    this.service.package = {...opts, ...pkg};\n\n    for (const excludeFile of packageExclude) {\n      const hasRule = (this.service.package.exclude || '').indexOf(excludeFile);\n      if (hasRule === -1) {\n        this.service.package.exclude.push(excludeFile);\n      }\n    }\n  }\n\n  relateLayerWithFunctions(layerArn) {\n    this.log('Associating layers...');\n\n    const { functions } = this.service;\n\n    Object.keys(functions).forEach(funcName => {\n      functions[funcName].layers = functions[funcName].layers || [];\n      functions[funcName].layers.push(layerArn);\n      this.log(`function.${funcName} - ${layerArn}`);\n    });\n\n    this.service.resources = this.service.resources || {};\n    this.service.resources.Outputs = this.service.resources.Outputs || {};\n\n    const outputName = this.getOutputLogicalId();\n\n    Object.assign(this.service.resources.Outputs, {\n      [outputName]: {\n        Value: layerArn,\n        Export: {\n          Name: outputName\n        }\n      }\n    });\n  }\n\n  getDependenciesList() {\n    return Object.keys((this.localPackage.dependencies||[])).map(x => (\n      `${x}@${this.localPackage.dependencies[x]}`\n    ));\n  }\n\n  async finalizeDeploy() {\n    const currentLayerARN = await this.getLayerArn();\n    Object.keys(this.service.functions).forEach(funcName => {\n      this.log(`function.${funcName} = layers.${currentLayerARN}`);\n    });\n  }\n\n  log(msg) {\n    this.serverless.cli.log(`[LayersPlugin]: ${msg}`);\n  }\n\n  warn(msg) {\n    this.serverless.cli.log(chalk.yellowBright(`[LayersPlugin]: ${msg}`));\n  }\n\n  error(msg) {\n    this.serverless.cli.log(chalk.red(`[LayersPlugin]: ${msg}`));\n  }\n\n  cleanUpLayers() {\n    return this.layersService.cleanUpLayers();\n  }\n}\n\nmodule.exports = ServerlessLayers;\n"],"file":"index.js"}