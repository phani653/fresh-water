{"version":3,"sources":["../../src/runtimes/nodejs.js"],"names":["path","require","NodeJSRuntime","parent","runtime","runtimeDir","plugin","packageManager","dependenciesPath","compatibleRuntimes","copyBeforeInstall","packageExclude","commands","npm","yarn","localpackageJson","join","process","cwd","localPackage","e","log","exit","run","osVersion","match","runtimeVersion","version","isCompatible","startsWith","depsA","depsB","depsKeyA","Object","keys","depsKeyB","isSizeEqual","length","hasDifference","forEach","dependence","bucketService","downloadDependencesFile","remotePackage","isDifferent","parsedRemotePackage","JSON","parse","dependencies","isDiff","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;IAEMC,a;;;AACJ,yBAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,UAA7B,EAAyC;AAAA;AACvC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKG,MAAL,GAAcH,MAAM,CAACG,MAArB;AAEA,sBAAe;AACbF,MAAAA,OAAO,EAAPA,OADa;AAEbC,MAAAA,UAAU,EAAVA,UAFa;AAGbE,MAAAA,cAAc,EAAG,KAHJ;AAIbC,MAAAA,gBAAgB,EAAE,cAJL;AAKbC,MAAAA,kBAAkB,EAAE,CAACJ,UAAD,CALP;AAMbK,MAAAA,iBAAiB,EAAE,CACjB,WADiB,EAEjB,mBAFiB,CANN;AAUbC,MAAAA,cAAc,EAAE,CACd,iBADc;AAVH,KAAf;AAeA,SAAKC,QAAL,GAAgB;AACdC,MAAAA,GAAG,EAAE,0BADS;AAEdC,MAAAA,IAAI,EAAE;AAFQ,KAAhB;AAKA,QAAMC,gBAAgB,GAAGf,IAAI,CAACgB,IAAL,CACvBC,OAAO,CAACC,GAAR,EADuB,EAEvB,gBAAaV,gBAFU,CAAzB;;AAKA,QAAI;AACF,WAAKW,YAAL,GAAoBlB,OAAO,CAACc,gBAAD,CAA3B;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACV,WAAKC,GAAL,+BAAgCN,gBAAhC;AACAE,MAAAA,OAAO,CAACK,IAAR,CAAa,CAAb;AACD;AACF;;;;;;;oDAEyBlB,O;;;;;;;;uBACA,KAAKD,MAAL,CAAYoB,GAAZ,CAAgB,gBAAhB,C;;;AAAlBC,gBAAAA,S;iCACmBpB,OAAO,CAACqB,KAAR,CAAc,WAAd,C,wEAAlBC,c;iDACA;AACLC,kBAAAA,OAAO,EAAEH,SADJ;AAELI,kBAAAA,YAAY,EAAEJ,SAAS,CAACK,UAAV,YAAyBH,cAAzB;AAFT,iB;;;;;;;;;;;;;;;;;;2BAMFI,K,EAAOC,K,EAAO;AACnB,UAAI,CAACD,KAAL,EAAY;AACV,eAAO,IAAP;AACD;;AAED,UAAME,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,CAAjB;AACA,UAAMK,QAAQ,GAAGF,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAjB;AACA,UAAMK,WAAW,GAAGJ,QAAQ,CAACK,MAAT,KAAoBF,QAAQ,CAACE,MAAjD;AAEA,UAAI,CAACD,WAAL,EAAkB,OAAO,IAAP;AAElB,UAAIE,aAAa,GAAG,KAApB;AACAL,MAAAA,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBS,OAAnB,CAA2B,UAAAC,UAAU,EAAI;AACvC,YAAIV,KAAK,CAACU,UAAD,CAAL,KAAsBT,KAAK,CAACS,UAAD,CAA/B,EAA6C;AAC3CF,UAAAA,aAAa,GAAG,IAAhB;AACD;AACF,OAJD;AAMA,aAAOA,aAAP;AACD;;;;;;;;;;;;;uBAG6B,KAAKhC,MAAL,CAAYmC,aAAZ,CAA0BC,uBAA1B,E;;;AAAtBC,gBAAAA,a;AAEFC,gBAAAA,W,GAAc,I;;qBAEdD,a;;;;;AACIE,gBAAAA,mB,GAAsBC,IAAI,CAACC,KAAL,CAAWJ,aAAX,C;AACpBK,gBAAAA,Y,GAAiBH,mB,CAAjBG,Y;AACR,qBAAK1C,MAAL,CAAYe,GAAZ,CAAgB,wCAAhB;;uBACoB,KAAK4B,MAAL,CAAYD,YAAZ,EAA0B,KAAK7B,YAAL,CAAkB6B,YAA5C,C;;;AAApBJ,gBAAAA,W;;;kDAGKA,W;;;;;;;;;;;;;;;;;;;;AAIXM,MAAM,CAACC,OAAP,GAAiBjD,aAAjB","sourcesContent":["const path = require('path');\n\nclass NodeJSRuntime {\n  constructor(parent, runtime, runtimeDir) {\n    this.parent = parent;\n    this.plugin = parent.plugin;\n\n    this.default = {\n      runtime,\n      runtimeDir,\n      packageManager:  'npm',\n      dependenciesPath: 'package.json',\n      compatibleRuntimes: [runtimeDir],\n      copyBeforeInstall: [\n        'yarn.lock',\n        'package-lock.json'\n      ],\n      packageExclude: [\n        'node_modules/**',\n      ]\n    };\n\n    this.commands = {\n      npm: 'npm install --production',\n      yarn: 'yarn --production'\n    };\n\n    const localpackageJson = path.join(\n      process.cwd(),\n      this.default.dependenciesPath\n    );\n\n    try {\n      this.localPackage = require(localpackageJson);\n    } catch (e) {\n      this.log(`Error: Can not find ${localpackageJson}!`);\n      process.exit(1);\n    }\n  }\n\n  async isCompatibleVersion(runtime) {\n    const osVersion = await this.parent.run('node --version');\n    const [runtimeVersion] = runtime.match(/([0-9.]+)/);\n    return {\n      version: osVersion,\n      isCompatible: osVersion.startsWith(`v${runtimeVersion}`)\n    };\n  }\n\n  isDiff(depsA, depsB) {\n    if (!depsA) {\n      return true;\n    }\n\n    const depsKeyA = Object.keys(depsA);\n    const depsKeyB = Object.keys(depsB);\n    const isSizeEqual = depsKeyA.length === depsKeyB.length;\n\n    if (!isSizeEqual) return true;\n\n    let hasDifference = false;\n    Object.keys(depsA).forEach(dependence => {\n      if (depsA[dependence] !== depsB[dependence]) {\n        hasDifference = true;\n      }\n    });\n\n    return hasDifference;\n  }\n\n  async hasDependencesChanged() {\n    const remotePackage = await this.plugin.bucketService.downloadDependencesFile();\n\n    let isDifferent = true;\n\n    if (remotePackage) {\n      const parsedRemotePackage = JSON.parse(remotePackage);\n      const { dependencies } = parsedRemotePackage;\n      this.plugin.log('Comparing package.json dependencies...');\n      isDifferent = await this.isDiff(dependencies, this.localPackage.dependencies);\n    }\n\n    return isDifferent;\n  }\n}\n\nmodule.exports = NodeJSRuntime;\n"],"file":"nodejs.js"}