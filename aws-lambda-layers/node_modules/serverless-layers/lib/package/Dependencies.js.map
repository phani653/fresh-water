{"version":3,"sources":["../../src/package/Dependencies.js"],"names":["fs","require","fsExtra","glob","path","mkdirp","execSync","copyFile","AbstractService","resolveFile","from","Promise","resolve","reject","err","files","Dependencies","runtimeDir","plugin","settings","layersPackageDir","join","process","cwd","compileDir","cmd","output","env","toString","filename","init","existsSync","warn","copyErr","copyBeforeInstall","copyAfterInstall","log","sync","copyProjectFile","dependenciesPath","index","customInstallationCommand","console","run","commands","runtimes","getCommands","packageManager","pathTo","to","pathFrom","copy","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst fsExtra = require('fs-extra');\nconst glob = require('glob');\nconst path = require('path');\nconst mkdirp = require('mkdirp');\nconst { execSync } = require('child_process');\nconst copyFile = require('fs-copy-file'); // node v6.10.3 support\n\nconst AbstractService = require('../AbstractService');\n\nfunction resolveFile(from) {\n  return new Promise((resolve, reject) => {\n    glob(from, {}, (err, files) => {\n      if (err) return reject();\n      return resolve(files);\n    });\n  });\n}\n\nclass Dependencies extends AbstractService {\n  init() {\n    const { runtimeDir } = this.plugin.settings;\n    this.layersPackageDir = path.join(process.cwd(), this.plugin.settings.compileDir, 'layers', runtimeDir);\n  }\n\n  async run(cmd) {\n    const output = execSync(cmd, {\n      cwd: this.layersPackageDir,\n      env: process.env\n    }).toString();\n    return output;\n  }\n\n  copyProjectFile(filename) {\n    this.init();\n\n    if (!fs.existsSync(filename)) {\n      this.plugin.warn(`[warning] \"${filename}\" file does not exists!`);\n      return true;\n    }\n\n    return new Promise((resolve) => {\n      copyFile(filename, path.join(this.layersPackageDir, filename), (copyErr) => {\n        if (copyErr) throw copyErr;\n        return resolve();\n      });\n    });\n  }\n\n  async install() {\n    const { copyBeforeInstall, copyAfterInstall } = this.plugin.settings;\n\n    this.init();\n    this.plugin.log('Dependencies has changed! Re-installing...');\n\n    await mkdirp.sync(this.layersPackageDir);\n    await this.copyProjectFile(this.plugin.settings.dependenciesPath);\n\n    for (const index in copyBeforeInstall) {\n      const filename = copyBeforeInstall[index];\n      if (!fs.existsSync(filename)) {\n        await this.copyProjectFile(filename);\n      }\n    }\n\n    // custom commands\n    if (this.plugin.settings.customInstallationCommand) {\n      console.log(await this.run(this.plugin.settings.customInstallationCommand));\n    } else {\n      const commands = this.plugin.runtimes.getCommands();\n      console.log(await this.run(commands[this.plugin.settings.packageManager]));\n    }\n\n    for (const index in copyAfterInstall) {\n      const pathTo = copyAfterInstall[index].to;\n      const pathFrom = copyAfterInstall[index].from;\n\n      const [from] = await resolveFile(path.join(this.layersPackageDir, pathFrom));\n      const to = path.join(this.layersPackageDir, pathTo);\n\n      try {\n        await fsExtra.copy(from, to);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }\n}\n\nmodule.exports = Dependencies;\n"],"file":"Dependencies.js"}