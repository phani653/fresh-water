{"version":3,"sources":["../../src/package/ZipService.js"],"names":["fs","require","path","archiver","MAX_LAYER_MB_SIZE","AbstractService","ZipService","zipFileName","plugin","getPathZipFileName","layersDir","join","process","cwd","settings","compileDir","Promise","resolve","reject","oldCwd","output","createWriteStream","zip","create","on","MB","pointer","toFixed","log","Error","err","chdir","pipe","directory","finalize","then","module","exports"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAMG,iBAAiB,GAAG,GAA1B;;AAEA,IAAMC,eAAe,GAAGJ,OAAO,CAAC,oBAAD,CAA/B;;IAEMK,U;;;;;;;;;;;;+BACM;AAAA;;AACR,UAAMC,WAAW,GAAG,KAAKC,MAAL,CAAYC,kBAAZ,EAApB;AACA,UAAMC,SAAS,GAAGR,IAAI,CAACS,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,KAAKL,MAAL,CAAYM,QAAZ,CAAqBC,UAA9C,CAAlB;AAEA,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,MAAM,GAAGP,OAAO,CAACC,GAAR,EAAf;AACA,YAAMO,MAAM,GAAGpB,EAAE,CAACqB,iBAAH,CAAqBd,WAArB,CAAf;AACA,YAAMe,GAAG,GAAGnB,QAAQ,CAACoB,MAAT,CAAgB,KAAhB,CAAZ;AAEAH,QAAAA,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmB,YAAM;AACvB,cAAMC,EAAE,GAAG,CAACH,GAAG,CAACI,OAAJ,KAAgB,IAAhB,GAAuB,IAAxB,EAA8BC,OAA9B,CAAsC,CAAtC,CAAX;;AAEA,cAAIF,EAAE,GAAGrB,iBAAT,EAA4B;AAC1B,YAAA,KAAI,CAACI,MAAL,CAAYoB,GAAZ,CAAgB,gBAAhB;;AACA,kBAAM,IAAIC,KAAJ,CACJ,kFACA,uFAFI,CAAN;AAID;;AAED,UAAA,KAAI,CAACrB,MAAL,CAAYoB,GAAZ,iCAAyCrB,WAAzC,eAAyDkB,EAAzD;;AACAR,UAAAA,OAAO;AACR,SAbD;AAeAK,QAAAA,GAAG,CAACE,EAAJ,CAAO,OAAP,EAAgB,UAACM,GAAD,EAAS;AACvBZ,UAAAA,MAAM,CAACY,GAAD,CAAN;AACAlB,UAAAA,OAAO,CAACmB,KAAR,CAAcZ,MAAd;AACD,SAHD;AAKAP,QAAAA,OAAO,CAACmB,KAAR,CAAcrB,SAAd;AAEAY,QAAAA,GAAG,CAACU,IAAJ,CAASZ,MAAT;AAEAE,QAAAA,GAAG,CAACW,SAAJ,CAAc,QAAd,EAAwB,KAAxB;AAEAX,QAAAA,GAAG,CAACY,QAAJ,GACGC,IADH,CACQ,YAAM;AACVvB,UAAAA,OAAO,CAACmB,KAAR,CAAcZ,MAAd;AACD,SAHH;AAID,OAnCM,CAAP;AAoCD;;;EAzCsBd,e;;AA4CzB+B,MAAM,CAACC,OAAP,GAAiB/B,UAAjB","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst archiver = require('archiver');\n\nconst MAX_LAYER_MB_SIZE = 250;\n\nconst AbstractService = require('../AbstractService');\n\nclass ZipService extends AbstractService {\n  package() {\n    const zipFileName = this.plugin.getPathZipFileName();\n    const layersDir = path.join(process.cwd(), this.plugin.settings.compileDir);\n\n    return new Promise((resolve, reject) => {\n      const oldCwd = process.cwd();\n      const output = fs.createWriteStream(zipFileName);\n      const zip = archiver.create('zip');\n\n      output.on('close', () => {\n        const MB = (zip.pointer() / 1024 / 1024).toFixed(1);\n\n        if (MB > MAX_LAYER_MB_SIZE) {\n          this.plugin.log('Package error!');\n          throw new Error(\n            'Layers can\\'t exceed the unzipped deployment package size limit of 250 MB! \\n'\n          + 'Read more: https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\\n\\n'\n          );\n        }\n\n        this.plugin.log(`Created layer package ${zipFileName} (${MB} MB)`);\n        resolve();\n      });\n\n      zip.on('error', (err) => {\n        reject(err);\n        process.chdir(oldCwd);\n      });\n\n      process.chdir(layersDir);\n\n      zip.pipe(output);\n\n      zip.directory('layers', false);\n\n      zip.finalize()\n        .then(() => {\n          process.chdir(oldCwd);\n        });\n    });\n  }\n}\n\nmodule.exports = ZipService;\n"],"file":"ZipService.js"}